<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on psycode - better code, better life.</title>
    <link>https://sh1yu.github.io/categories/devops/</link>
    <description>Recent content in devops on psycode - better code, better life.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 22 Aug 2020 12:47:25 +0800</lastBuildDate><atom:link href="https://sh1yu.github.io/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kubernetes之StatefulSet</title>
      <link>https://sh1yu.github.io/post/kubernetes-statefulset/</link>
      <pubDate>Sat, 22 Aug 2020 12:47:25 +0800</pubDate>
      
      <guid>https://sh1yu.github.io/post/kubernetes-statefulset/</guid>
      <description>概述 RC、Deployment、DaemonSet都是面向无状态的服务，它们所管理的Pod的IP、名字，启停顺序等都是随机的，而StatefulSet是什么？顾名思义，有状态的集合，管理所有有状态的服务，比如MySQL、MongoDB集群等。
StatefulSet本质上是Deployment的一种变体，在v1.9版本中已成为GA版本，它为了解决有状态服务的问题，它所管理的Pod拥有固定的Pod名称，启停顺序，在StatefulSet中，Pod名字称为网络标识(hostname)，还必须要用到共享存储。
在Deployment中，与之对应的服务是service，而在StatefulSet中与之对应的headless service，headless service，即无头服务，与service的区别就是它没有Cluster IP，解析它的名称时将返回该Headless Service对应的全部Pod的Endpoint列表。
除此之外，StatefulSet在Headless Service的基础上又为StatefulSet控制的每个Pod副本创建了一个DNS域名，这个域名的格式为：
$(podname).(headless server name) FQDN： $(podname).(headless server name).namespace.svc.cluster.local StatefulSet示例 接下来看一些示例，演示下上面所说的特性，以加深理解。
apiVersion: v1 kind: Service metadata: name: nginx labels: app: nginx spec: ports: - port: 80 name: web clusterIP: None selector: app: nginx --- apiVersion: apps/v1 kind: StatefulSet metadata: name: web spec: selector: matchLabels: app: nginx # has to match .spec.template.metadata.labels serviceName: &amp;#34;nginx&amp;#34; #声明它属于哪个Headless Service. replicas: 3 # by default is 1 template: metadata: labels: app: nginx # has to match .</description>
    </item>
    
    <item>
      <title>archlinux使用操作拾遗</title>
      <link>https://sh1yu.github.io/post/archlinux-operation/</link>
      <pubDate>Wed, 13 Feb 2019 11:22:54 +0800</pubDate>
      
      <guid>https://sh1yu.github.io/post/archlinux-operation/</guid>
      <description>这周末打开了未经常使用的archlinux，使用过程中遇到了一些问题，进行了解决，在此做个记录。
archlinux无线联网问题 我安装的archinux是命令行版本，只能无线联网。
检测网卡的PCI-ID
lspci -vnn | grep 14e4: 获取驱动
   驱动 描述     brcmsmac/brcmfmac 开源内核驱动   b43 逆向工程内核驱动   broadcom-wl 专有的 Broadcom STA 驱动    b43/b43legacy的运行都需要安装闭源固件， 请从AUR安装b43-firmware， b43-firmware-classic或者 b43-firmware-legacy。
lsmod |grep b43 发现b43驱动已经安装
systemctl status NetworkManager 发现NetworkManager已经安装（pacman安装包为networkmanager）
nmcli dev 发现无线网尚未连接。使用如下命令成功连接wifi：
nmcli dev wifi connect &amp;lt;SSID&amp;gt; password &amp;lt;password&amp;gt; archlinux 软件全部升级签名问题 使用sudo pacman -Syu遇到了 invalid or corrupted package ... unknown trust的问题，应该是签名验证不通过，使用如下方法解决了：
sudo pacman-key --init sudo vim /etc/pacman.</description>
    </item>
    
    <item>
      <title>使用docker运行gogs服务</title>
      <link>https://sh1yu.github.io/post/run-gogs-with-docker/</link>
      <pubDate>Wed, 13 Feb 2019 11:22:54 +0800</pubDate>
      
      <guid>https://sh1yu.github.io/post/run-gogs-with-docker/</guid>
      <description>学习使用 gogs 搭建自己的 git 托管服务，但是不想在安装 gogs 时创建系统用户污染当前的 Mac 系统环境，决定使用 docker 启动该服务，同时学习一些基础的 docker 命令。
 目标   使用 docker 和 docker-compose 运行并管理 gogs 服务
  使用 caddy 为 gogs 搭建反向代理
  简单配置 caddy 与 gogs 容器的 docker 网络
  工具与组件  docker for Mac：Mac环境下的 docker 服务版本，提供 docker 环境以及 docker-compose等命令 gogs : 一个 go 语言实现的简单快速的git代码托管服务，类似于 github 和 gitlab caddy: go 语言实现的简单的web服务器，可进行反向代理，类似于 nginx  创建caddy配置 创建caddy文件夹，并在文件夹下创建文件Caddyfile
localhost { proxy / gogs:3000 { header_upstream Host {host} header_upstream X-Real-IP {remote} header_upstream X-Forwarded-For {remote} header_upstream X-Forwarded-Proto {scheme} } log /var/log/caddy.</description>
    </item>
    
  </channel>
</rss>
