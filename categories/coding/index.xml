<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coding on psy&#39;s code</title>
    <link>https://sh1yu.github.io/categories/coding/</link>
    <description>Recent content in coding on psy&#39;s code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 04 Sep 2021 19:35:00 +0800</lastBuildDate><atom:link href="https://sh1yu.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang组合、接口以及反序列化</title>
      <link>https://sh1yu.github.io/post/golang%E7%BB%84%E5%90%88%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Sat, 04 Sep 2021 19:35:00 +0800</pubDate>
      
      <guid>https://sh1yu.github.io/post/golang%E7%BB%84%E5%90%88%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      
        <description>现在，我想用Go实现一个Event类，有如下的要求：
 有多种Event类型，不同的Event类型拥有不同的参数； 这些Event会被持久化到存储中，在需要时反序列化回来； 每个Event都有Process方法，具体的方法实现逻辑存放在不同的Event具体类型中。  ok，看需求并不复杂，不就是面向对象的继承、重载那一套吗，so easy，直接开搞！ 但是真正实现时，才发现没有想象中的那么简单&amp;hellip;
1. 结构体实现 首先我们使用go来实现结构体Event，然后利用组合的方式实现两个Event:</description>
      
    </item>
    
    <item>
      <title>一次springboot&#43;dubbo的项目实战</title>
      <link>https://sh1yu.github.io/post/%E4%B8%80%E6%AC%A1springboot&#43;dubbo%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</link>
      <pubDate>Mon, 05 Apr 2021 00:11:49 +0800</pubDate>
      
      <guid>https://sh1yu.github.io/post/%E4%B8%80%E6%AC%A1springboot&#43;dubbo%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</guid>
      
        <description>最近在从零开始实现一个服务端在线接口项目，项目选型为springboot + dubbo。由于是新项目，没有历史包袱，所以给了自己一次从头开始按照想法进行最优编码实践的机会。
1. 功能实现 项目使用springboot-web暴露网关接口，内部通过dubbo调用服务，比如用户服务。主要组件基本包括两块：gateway和service-provider。其中gateway对外暴露web端口，对内为dubbo的consumer。 通用的启动程序：
@SpringBootApplication @EnableAspectJAutoProxy @EnableDubbo @Slf4j public class MainApplication { public static void main(String[] args) { SpringApplication.</description>
      
    </item>
    
    <item>
      <title>Vert.x线程与Future</title>
      <link>https://sh1yu.github.io/post/vert.x-and-future/</link>
      <pubDate>Wed, 13 Feb 2019 11:29:12 +0000</pubDate>
      
      <guid>https://sh1yu.github.io/post/vert.x-and-future/</guid>
      
        <description>Vert.x有两个重要的线程池: Event loop线程池和Worker线程池。
 Event loop线程池 在一个标准的反应器实现中，有一个独立的 Event Loop会循环执行，处理所有到达的事件并传递给处理器处理。Vert.x的工作方式有所不同，每个Vertx实例维护多个Event Loop 线程。Event Loop数量默认为核数的2倍，也可以通过如下方式进行设置：</description>
      
    </item>
    
  </channel>
</rss>