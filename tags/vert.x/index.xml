<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vert.x on psycode - better code, better life.</title>
    <link>https://sh1yu.github.io/tags/vert.x/</link>
    <description>Recent content in Vert.x on psycode - better code, better life.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 13 Feb 2019 11:29:12 +0000</lastBuildDate><atom:link href="https://sh1yu.github.io/tags/vert.x/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vert.x线程与Future</title>
      <link>https://sh1yu.github.io/post/vert.x-and-future/</link>
      <pubDate>Wed, 13 Feb 2019 11:29:12 +0000</pubDate>
      
      <guid>https://sh1yu.github.io/post/vert.x-and-future/</guid>
      <description>Vert.x有两个重要的线程池: Event loop线程池和Worker线程池。
 Event loop线程池 在一个标准的反应器实现中，有一个独立的 Event Loop会循环执行，处理所有到达的事件并传递给处理器处理。Vert.x的工作方式有所不同，每个Vertx实例维护多个Event Loop 线程。Event Loop数量默认为核数的2倍，也可以通过如下方式进行设置：
Vertx vertx = Vertx.vertx(new VertxOptions().setEventLoopPoolSize(5)); 这种模式称为Multi-Reactor模式（多反应器模式）。但是需要注意的是，即使一个Vertx实例维护了多个Event Loop，任何一个特定的处理器永远不会被并发执行。大部分情况下（除了Worker Verticle以外）它们总是在同一个Event Loop 线程中被调用。
Handler是依次分发给每一个Event Loop的，且特定的Handler永远不会被并发执行。如果某一个Handler耗时过多，则Handler所在的Event Loop线程会被该Handler所拖慢。
Worker线程池 不要在处理器中阻塞Event loop线程。如果需要执行阻塞代码，需要在worker线程池中之行。Vert.x的Worker Pool数量默认为20，可以通过如下方式设置：
Vertx vertx = Vertx.vertx(new VertxOptions().setWorkerPoolSize(5)); 有两种方式可以使代码使用woker线程执行：
 **通过调用executeBlocking方法来指定阻塞式代码的执行以及阻塞式代码执行后处理结果的异步回调。**默认情况下，如果executeBlocking在同一个上下文环境中（如：同一个Verticle实例）被调用了多次，那么这些不同的executeBlocking代码块会顺序执行（一个接一个）。若不需要关心您调用executeBlocking的顺序，可以将ordered参数的值设为false。这样任何executeBlocking都会在Worker Pool中并行执行。 使用Worker Verticle，一个Worker Verticle始终会使用Worker Pool中的某个线程来执行。  vertx.executeBlocking(future -&amp;gt; { // 调用一些需要耗费显著执行时间返回结果的阻塞式API  String result = someAPI.blockingMethod(&amp;#34;hello&amp;#34;); future.complete(result); }, res -&amp;gt; { System.out.println(&amp;#34;The result is: &amp;#34; + res.result()); }); 可以为不同的用途创建不同的池:
WorkerExecutor executor = vertx.</description>
    </item>
    
  </channel>
</rss>
