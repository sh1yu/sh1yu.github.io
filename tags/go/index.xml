<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on psycode - better code, better life.</title>
    <link>https://sh1yu.github.io/tags/go/</link>
    <description>Recent content in go on psycode - better code, better life.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 04 Sep 2021 19:35:00 +0800</lastBuildDate><atom:link href="https://sh1yu.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang组合、接口以及反序列化</title>
      <link>https://sh1yu.github.io/post/golang%E7%BB%84%E5%90%88%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Sat, 04 Sep 2021 19:35:00 +0800</pubDate>
      
      <guid>https://sh1yu.github.io/post/golang%E7%BB%84%E5%90%88%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>现在，我想用Go实现一个Event类，有如下的要求：
 有多种Event类型，不同的Event类型拥有不同的参数； 这些Event会被持久化到存储中，在需要时反序列化回来； 每个Event都有Process方法，具体的方法实现逻辑存放在不同的Event具体类型中。  ok，看需求并不复杂，不就是面向对象的继承、重载那一套吗，so easy，直接开搞！ 但是真正实现时，才发现没有想象中的那么简单&amp;hellip;
1. 结构体实现 首先我们使用go来实现结构体Event，然后利用组合的方式实现两个Event:
type Event struct { EventType string `json:&amp;#34;event_type&amp;#34;` } type ClickEvent struct { Event `json:&amp;#34;,inline&amp;#34;` OnPosX int64 `json:&amp;#34;on_pos_x&amp;#34;` OnPosY int64 `json:&amp;#34;on_pos_y&amp;#34;` } type DragEvent struct { Event `json:&amp;#34;,inline&amp;#34;` OnPosX int64 `json:&amp;#34;on_pos_x&amp;#34;` OnPosY int64 `json:&amp;#34;on_pos_y&amp;#34;` ToPosX int64 `json:&amp;#34;to_pos_x&amp;#34;` ToPosY int64 `json:&amp;#34;to_pos_y&amp;#34;` } 很简单，没有问题。
2. 序列化与反序列化 让我们尝试将其序列化到json，以便持久化存储：
func main() { event1 := ClickEvent{ Event: Event{EventType: &amp;#34;click&amp;#34;}, OnPosX: 0, OnPosY: 0, } b1, _ := json.</description>
    </item>
    
    <item>
      <title>使用docker运行gogs服务</title>
      <link>https://sh1yu.github.io/post/run-gogs-with-docker/</link>
      <pubDate>Wed, 13 Feb 2019 11:22:54 +0800</pubDate>
      
      <guid>https://sh1yu.github.io/post/run-gogs-with-docker/</guid>
      <description>学习使用 gogs 搭建自己的 git 托管服务，但是不想在安装 gogs 时创建系统用户污染当前的 Mac 系统环境，决定使用 docker 启动该服务，同时学习一些基础的 docker 命令。
 目标   使用 docker 和 docker-compose 运行并管理 gogs 服务
  使用 caddy 为 gogs 搭建反向代理
  简单配置 caddy 与 gogs 容器的 docker 网络
  工具与组件  docker for Mac：Mac环境下的 docker 服务版本，提供 docker 环境以及 docker-compose等命令 gogs : 一个 go 语言实现的简单快速的git代码托管服务，类似于 github 和 gitlab caddy: go 语言实现的简单的web服务器，可进行反向代理，类似于 nginx  创建caddy配置 创建caddy文件夹，并在文件夹下创建文件Caddyfile
localhost { proxy / gogs:3000 { header_upstream Host {host} header_upstream X-Real-IP {remote} header_upstream X-Forwarded-For {remote} header_upstream X-Forwarded-Proto {scheme} } log /var/log/caddy.</description>
    </item>
    
  </channel>
</rss>
